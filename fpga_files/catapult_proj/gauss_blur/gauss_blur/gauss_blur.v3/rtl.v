// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   gsp14@EEWS305-036
//  Generated date: Sat May 07 13:53:15 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    gauss_blur_core
// ------------------------------------------------------------------


module gauss_blur_core (
  vin, vga_xy, clk, en, arst_n, vout_rsc_mgc_out_stdreg_d, volume_rsc_mgc_out_stdreg_d
);
  input [89:0] vin;
  input [19:0] vga_xy;
  input clk;
  input en;
  input arst_n;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;
  output [3:0] volume_rsc_mgc_out_stdreg_d;
  reg [3:0] volume_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire or_dcpl_3;
  reg [25:0] regs_regs_0_sg1_sva;
  reg [3:0] acc_13_1_sva;
  reg [9:0] blue_xy_0_sva;
  reg [9:0] blue_xy_1_sva;
  reg [3:0] volume_previous_sva;
  reg land_11_lpi_1_dfm_1;
  reg [3:0] volume_current_sva_1;
  reg [4:0] acc_11_cse_sva_1;
  reg [1:0] or_4_itm_1;
  reg [3:0] or_3_itm_1;
  reg [9:0] regs_regs_slc_regs_regs_2_sg1_itm_1;
  reg [1:0] or_5_itm_1;
  reg [3:0] or_6_itm_1;
  reg [3:0] or_7_itm_1;
  reg main_stage_0_2;
  reg main_stage_0_3;
  wire [3:0] acc_13_1_sva_dfm_1_mx0;
  wire [9:0] blue_xy_1_sva_dfm_2_mx0;
  wire [25:0] regs_regs_1_sg1_sva_mx0;
  wire [9:0] blue_xy_1_sva_dfm;
  wire [9:0] blue_xy_0_sva_dfm;
  reg reg_deltay_square_blue_acc_psp_sva_tmp;
  wire or_15_cse;
  wire and_6_cse;
  wire [11:0] deltay_square_blue_acc_1_itm;
  wire [12:0] nl_deltay_square_blue_acc_1_itm;
  wire [10:0] aif_45_acc_itm;
  wire [11:0] nl_aif_45_acc_itm;
  wire [11:0] deltax_square_blue_acc_1_itm;
  wire [12:0] nl_deltax_square_blue_acc_1_itm;
  wire [25:0] regs_regs_0_sg1_sva_mx0;
  wire [3:0] volume_previous_sva_mx0;
  wire [3:0] volume_current_sva;
  wire [4:0] nl_volume_current_sva;
  wire land_11_lpi_1_dfm;
  wire [3:0] acc_13_1_sva_dfm;
  wire [9:0] blue_xy_0_sva_dfm_2_mx0;
  wire [3:0] if_3_acc_svs;
  wire [4:0] nl_if_3_acc_svs;
  wire [3:0] if_3_acc_1_psp_sva;
  wire [4:0] nl_if_3_acc_1_psp_sva;
  wire [5:0] acc_imod_sva;
  wire [6:0] nl_acc_imod_sva;
  wire land_13_lpi_1_dfm;
  wire [6:0] conc_imod_sg1_sva;
  wire [8:0] nl_conc_imod_sg1_sva;
  wire [5:0] conc_imod_1_sg1_sva;
  wire [6:0] nl_conc_imod_1_sg1_sva;
  wire [10:0] acc_9_psp_sva;
  wire [11:0] nl_acc_9_psp_sva;
  wire mux_11_itm;
  wire nand_itm;


  // Interconnect Declarations for Component Instantiations 
  assign and_6_cse = (~ or_15_cse) & main_stage_0_2;
  assign regs_regs_0_sg1_sva_mx0 = MUX_v_26_2_2({regs_regs_0_sg1_sva , (vin[29:4])},
      main_stage_0_3);
  assign regs_regs_1_sg1_sva_mx0 = regs_regs_0_sg1_sva_mx0 & ({{25{main_stage_0_2}},
      main_stage_0_2});
  assign or_15_cse = (readslicef_5_1_4((conv_s2u_4_5(acc_11_cse_sva_1[4:1]) + 5'b1)))
      | (readslicef_6_1_5((conv_s2s_5_6(~ acc_11_cse_sva_1) + 6'b11)));
  assign volume_previous_sva_mx0 = MUX_v_4_2_2({volume_previous_sva , volume_current_sva_1},
      and_6_cse);
  assign nl_volume_current_sva = conv_s2u_3_4(readslicef_4_3_1((conv_u2s_3_4({(readslicef_3_2_1((conv_u2u_2_3({(conc_imod_sg1_sva[5])
      , 1'b1}) + conv_u2u_2_3({(~ (conc_imod_sg1_sva[6])) , (~((conc_imod_1_sg1_sva[5])
      & (~ (acc_9_psp_sva[10]))))})))) , 1'b1}) + conv_s2s_3_4({1'b1 , (acc_9_psp_sva[7])
      , ((acc_9_psp_sva[10]) & (~ (conc_imod_1_sg1_sva[5])) & ((conc_imod_1_sg1_sva[4])
      | (conc_imod_1_sg1_sva[3]) | (conc_imod_1_sg1_sva[2]) | (conc_imod_1_sg1_sva[1])
      | (conc_imod_1_sg1_sva[0]) | (acc_9_psp_sva[1]) | (acc_9_psp_sva[0])))}))))
      + conv_s2u_3_4(acc_9_psp_sva[10:8]);
  assign volume_current_sva = nl_volume_current_sva[3:0];
  assign land_11_lpi_1_dfm = ~((readslicef_11_1_10((({1'b1 , (~ (vga_xy[19:10]))})
      + 11'b101001))) | (readslicef_11_1_10((({1'b1 , (~ (vga_xy[9:0]))}) + 11'b101001))));
  assign acc_13_1_sva_dfm_1_mx0 = MUX_v_4_2_2({(acc_13_1_sva_dfm + 4'b1) , acc_13_1_sva_dfm},
      (readslicef_11_1_10((({1'b1 , (~ (regs_regs_1_sg1_sva_mx0[19:10]))}) + 11'b101000001)))
      | (readslicef_8_1_7((conv_u2u_7_8(regs_regs_1_sg1_sva_mx0[9:3]) + 8'b11010011)))
      | (readslicef_10_1_9(((~ (regs_regs_1_sg1_sva_mx0[9:0])) + 10'b1011010001))));
  assign acc_13_1_sva_dfm = acc_13_1_sva & (signext_4_1((if_3_acc_svs[3]) | (if_3_acc_svs[2])
      | (if_3_acc_svs[1]) | (if_3_acc_svs[0])));
  assign blue_xy_1_sva_dfm_2_mx0 = MUX_v_10_2_2({(vga_xy[19:10]) , blue_xy_1_sva_dfm},
      or_dcpl_3);
  assign blue_xy_0_sva_dfm_2_mx0 = MUX_v_10_2_2({(vga_xy[9:0]) , blue_xy_0_sva_dfm},
      or_dcpl_3);
  assign blue_xy_1_sva_dfm = blue_xy_1_sva & ({{9{nand_itm}}, nand_itm});
  assign blue_xy_0_sva_dfm = blue_xy_0_sva & ({{9{nand_itm}}, nand_itm});
  assign nl_deltay_square_blue_acc_1_itm = ({1'b1 , (vga_xy[19:10]) , 1'b1}) + conv_u2s_11_12({(~
      blue_xy_1_sva_dfm_2_mx0) , 1'b1});
  assign deltay_square_blue_acc_1_itm = nl_deltay_square_blue_acc_1_itm[11:0];
  assign mux_11_itm = MUX_s_1_2_2({(deltay_square_blue_acc_1_itm[11]) , reg_deltay_square_blue_acc_psp_sva_tmp},
      (deltax_square_blue_acc_1_itm[11]) | (aif_45_acc_itm[10]));
  assign nl_aif_45_acc_itm = ({1'b1 , (~ (deltax_square_blue_acc_1_itm[10:1]))})
      + 11'b101001;
  assign aif_45_acc_itm = nl_aif_45_acc_itm[10:0];
  assign nl_deltax_square_blue_acc_1_itm = ({1'b1 , (vga_xy[9:0]) , 1'b1}) + conv_u2s_11_12({(~
      blue_xy_0_sva_dfm_2_mx0) , 1'b1});
  assign deltax_square_blue_acc_1_itm = nl_deltax_square_blue_acc_1_itm[11:0];
  assign nl_if_3_acc_svs = conv_s2u_1_4(if_3_acc_1_psp_sva[3]) + if_3_acc_1_psp_sva;
  assign if_3_acc_svs = nl_if_3_acc_svs[3:0];
  assign nl_if_3_acc_1_psp_sva = (readslicef_5_4_1((({(~ (acc_imod_sva[3])) , 4'b1})
      + conv_s2u_3_5(acc_imod_sva[5:3])))) + ({1'b1 , (acc_imod_sva[2:0])});
  assign if_3_acc_1_psp_sva = nl_if_3_acc_1_psp_sva[3:0];
  assign nl_acc_imod_sva = conv_s2s_5_6(({3'b100 , (vga_xy[9:8])}) + conv_u2s_4_5(readslicef_5_4_1((conv_u2u_4_5({(vga_xy[2:0])
      , 1'b1}) + conv_u2u_4_5(vga_xy[6:3]))))) + conv_u2s_5_6({(conv_u2u_1_2(~ (vga_xy[3]))
      + conv_u2u_1_2(~ (vga_xy[7]))) , 2'b0 , (readslicef_2_1_1((conv_u2u_1_2(vga_xy[7])
      + 2'b1)))});
  assign acc_imod_sva = nl_acc_imod_sva[5:0];
  assign land_13_lpi_1_dfm = ~((readslicef_11_1_10((({1'b1 , (~ (deltay_square_blue_acc_1_itm[10:1]))})
      + 11'b101001))) | mux_11_itm | (aif_45_acc_itm[10]) | (deltax_square_blue_acc_1_itm[11]));
  assign nl_conc_imod_sg1_sva = (conv_u2s_6_7({(conv_u2u_2_3(acc_9_psp_sva[9:8])
      + conv_u2u_2_3({(acc_9_psp_sva[10]) , (acc_9_psp_sva[10])})) , (acc_9_psp_sva[10:8])})
      + conv_s2s_6_7({(acc_9_psp_sva[7]) , 1'b0 , (acc_9_psp_sva[7]) , 2'b0 , (acc_9_psp_sva[7])}))
      + ({(acc_9_psp_sva[10]) , 1'b0 , (acc_9_psp_sva[6:2])});
  assign conc_imod_sg1_sva = nl_conc_imod_sg1_sva[6:0];
  assign nl_conc_imod_1_sg1_sva = (readslicef_7_6_1((conv_s2s_6_7({1'b1 , (~ (conc_imod_sg1_sva[6]))
      , 2'b11 , (~ (conc_imod_sg1_sva[6])) , 1'b1}) + conv_u2s_6_7({(conc_imod_sg1_sva[4:0])
      , 1'b1})))) + ({(conc_imod_sg1_sva[5]) , 1'b0 , (conc_imod_sg1_sva[5]) , 2'b0
      , (conc_imod_sg1_sva[5])});
  assign conc_imod_1_sg1_sva = nl_conc_imod_1_sg1_sva[5:0];
  assign nl_acc_9_psp_sva = conv_u2s_10_11(~ blue_xy_1_sva_dfm_2_mx0) + 11'b11111000001;
  assign acc_9_psp_sva = nl_acc_9_psp_sva[10:0];
  assign nand_itm = ~((~((vga_xy[9]) | (vga_xy[8]) | (vga_xy[7]) | (vga_xy[6]) |
      (vga_xy[5]) | (vga_xy[4]) | (vga_xy[3]) | (vga_xy[2]) | (vga_xy[1]) | (vga_xy[0])))
      & (~((vga_xy[19]) | (vga_xy[18]) | (vga_xy[17]) | (vga_xy[16]) | (vga_xy[15])
      | (vga_xy[14]) | (vga_xy[13]) | (vga_xy[12]) | (vga_xy[11]) | (vga_xy[10]))));
  assign or_dcpl_3 = (~ (readslicef_5_1_4((({1'b1 , (~ acc_13_1_sva_dfm_1_mx0)})
      + 5'b101)))) | (blue_xy_1_sva_dfm[9]) | (blue_xy_1_sva_dfm[8]) | (blue_xy_1_sva_dfm[7])
      | (blue_xy_1_sva_dfm[6]) | (blue_xy_1_sva_dfm[5]) | (blue_xy_1_sva_dfm[4])
      | (blue_xy_1_sva_dfm[3]) | (blue_xy_1_sva_dfm[2]) | (blue_xy_1_sva_dfm[1])
      | (blue_xy_1_sva_dfm[0]) | (blue_xy_0_sva_dfm[9]) | (blue_xy_0_sva_dfm[8])
      | (blue_xy_0_sva_dfm[7]) | (blue_xy_0_sva_dfm[6]) | (blue_xy_0_sva_dfm[5])
      | (blue_xy_0_sva_dfm[4]) | (blue_xy_0_sva_dfm[3]) | (blue_xy_0_sva_dfm[2])
      | (blue_xy_0_sva_dfm[1]) | (blue_xy_0_sva_dfm[0]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      regs_regs_0_sg1_sva <= 26'b0;
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      volume_rsc_mgc_out_stdreg_d <= 4'b0;
      volume_previous_sva <= 4'b0;
      volume_current_sva_1 <= 4'b0;
      acc_11_cse_sva_1 <= 5'b0;
      land_11_lpi_1_dfm_1 <= 1'b0;
      or_4_itm_1 <= 2'b0;
      or_3_itm_1 <= 4'b0;
      regs_regs_slc_regs_regs_2_sg1_itm_1 <= 10'b0;
      or_5_itm_1 <= 2'b0;
      or_6_itm_1 <= 4'b0;
      or_7_itm_1 <= 4'b0;
      blue_xy_1_sva <= 10'b0;
      blue_xy_0_sva <= 10'b0;
      acc_13_1_sva <= 4'b0;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      reg_deltay_square_blue_acc_psp_sva_tmp <= 1'b0;
    end
    else begin
      if ( en ) begin
        regs_regs_0_sg1_sva <= regs_regs_0_sg1_sva_mx0;
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({vout_rsc_mgc_out_stdreg_d , ({(signext_10_9({land_11_lpi_1_dfm_1
            , (signext_4_3({land_11_lpi_1_dfm_1 , or_4_itm_1})) , or_3_itm_1})) ,
            regs_regs_slc_regs_regs_2_sg1_itm_1 , or_5_itm_1 , or_6_itm_1 , or_7_itm_1})},
            main_stage_0_2);
        volume_rsc_mgc_out_stdreg_d <= MUX1HOT_v_4_3_2({volume_rsc_mgc_out_stdreg_d
            , volume_current_sva_1 , volume_previous_sva}, {(~ main_stage_0_2) ,
            and_6_cse , (or_15_cse & main_stage_0_2)});
        volume_previous_sva <= volume_previous_sva_mx0;
        volume_current_sva_1 <= volume_current_sva;
        acc_11_cse_sva_1 <= readslicef_6_5_1((({1'b1 , volume_current_sva , 1'b1})
            + conv_u2s_5_6({(~ volume_previous_sva_mx0) , 1'b1})));
        land_11_lpi_1_dfm_1 <= land_11_lpi_1_dfm;
        or_4_itm_1 <= (regs_regs_1_sg1_sva_mx0[25:24]) | ({{1{land_11_lpi_1_dfm}},
            land_11_lpi_1_dfm});
        or_3_itm_1 <= (regs_regs_1_sg1_sva_mx0[23:20]) | ({{3{land_11_lpi_1_dfm}},
            land_11_lpi_1_dfm});
        regs_regs_slc_regs_regs_2_sg1_itm_1 <= regs_regs_1_sg1_sva_mx0[19:10];
        or_5_itm_1 <= (regs_regs_1_sg1_sva_mx0[9:8]) | ({{1{land_13_lpi_1_dfm}},
            land_13_lpi_1_dfm});
        or_6_itm_1 <= (regs_regs_1_sg1_sva_mx0[7:4]) | ({{3{land_13_lpi_1_dfm}},
            land_13_lpi_1_dfm});
        or_7_itm_1 <= (regs_regs_1_sg1_sva_mx0[3:0]) | ({{3{land_13_lpi_1_dfm}},
            land_13_lpi_1_dfm});
        blue_xy_1_sva <= blue_xy_1_sva_dfm_2_mx0;
        blue_xy_0_sva <= blue_xy_0_sva_dfm_2_mx0;
        acc_13_1_sva <= acc_13_1_sva_dfm_1_mx0;
        main_stage_0_2 <= 1'b1;
        main_stage_0_3 <= main_stage_0_2;
        reg_deltay_square_blue_acc_psp_sva_tmp <= mux_11_itm;
      end
    end
  end

  function [25:0] MUX_v_26_2_2;
    input [51:0] inputs;
    input [0:0] sel;
    reg [25:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[51:26];
      end
      1'b1 : begin
        result = inputs[25:0];
      end
      default : begin
        result = inputs[51:26];
      end
    endcase
    MUX_v_26_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [3:0] signext_4_3;
    input [2:0] vector;
  begin
    signext_4_3= {{1{vector[2]}}, vector};
  end
  endfunction


  function [9:0] signext_10_9;
    input [8:0] vector;
  begin
    signext_10_9= {{1{vector[8]}}, vector};
  end
  endfunction


  function [3:0] MUX1HOT_v_4_3_2;
    input [11:0] inputs;
    input [2:0] sel;
    reg [3:0] result;
    integer i;
  begin
    result = inputs[0+:4] & {4{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*4+:4] & {4{sel[i]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function  [4:0] conv_s2u_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2u_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function  [3:0] conv_s2u_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_4 = {vector[2], vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_s2u_1_4 ;
    input signed [0:0]  vector ;
  begin
    conv_s2u_1_4 = {{3{vector[0]}}, vector};
  end
  endfunction


  function  [4:0] conv_s2u_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_7 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    gauss_blur
//  Generated from file(s):
//    2) $PROJECT_HOME/../gauss_blur_source/gauss_blur.c
// ------------------------------------------------------------------


module gauss_blur (
  vin, vout_rsc_z, vga_xy, volume_rsc_z, clk, en, arst_n
);
  input [89:0] vin;
  output [29:0] vout_rsc_z;
  input [19:0] vga_xy;
  output [3:0] volume_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vout_rsc_mgc_out_stdreg_d;
  wire [3:0] volume_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(4)) volume_rsc_mgc_out_stdreg (
      .d(volume_rsc_mgc_out_stdreg_d),
      .z(volume_rsc_z)
    );
  gauss_blur_core gauss_blur_core_inst (
      .vin(vin),
      .vga_xy(vga_xy),
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d),
      .volume_rsc_mgc_out_stdreg_d(volume_rsc_mgc_out_stdreg_d)
    );
endmodule



