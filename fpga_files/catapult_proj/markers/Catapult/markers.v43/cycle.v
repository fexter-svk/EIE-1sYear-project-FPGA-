// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   mf2915@EEWS104A-015
//  Generated date: Wed May 04 14:54:51 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    markers_core
// ------------------------------------------------------------------


module markers_core (
  vin, vga_xy, clk, en, arst_n, vout_rsc_mgc_out_stdreg_d
);
  input [89:0] vin;
  input [19:0] vga_xy;
  input clk;
  input en;
  input arst_n;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [3:0] acc_3_1_sva;
    reg [5:0] acc_imod_sva;
    reg [3:0] if_acc_1_psp_sva;
    reg [3:0] if_acc_svs;
    reg [3:0] acc_3_1_sva_dfm;
    reg slc_svs;
    reg land_2_sva_1;
    reg land_2_lpi_1_dfm;
    reg aif_1_slc_svs;
    reg aif_1_land_sva_1;
    reg land_1_lpi_1_dfm;
    reg aif_5_slc_svs;
    reg aif_5_land_sva_1;
    reg land_lpi_1_dfm;
    reg else_1_slc_svs;
    reg else_1_land_2_sva_1;
    reg else_1_land_2_lpi_1_dfm;
    reg else_1_aif_1_slc_svs;
    reg else_1_aif_1_land_sva_1;
    reg else_1_land_1_lpi_1_dfm;
    reg else_1_aif_2_slc_svs;
    reg else_1_aif_2_land_sva_1;
    reg else_1_land_lpi_1_dfm;
    reg [3:0] acc_3_1_sva_2;
    reg [3:0] acc_3_1_sva_dfm_2;
    reg [7:0] red_out_sg1_sva;
    reg [7:0] green_out_sg1_sva;
    reg [7:0] blue_out_sg1_sva;
    reg [3:0] acc_3_1_sva_dfm_3;
    reg land_1_lpi_1_dfm_1;
    reg aif_5_slc_svs_1;
    reg land_lpi_1_dfm_1;
    reg else_1_land_2_lpi_1_dfm_2;
    reg else_1_aif_1_slc_svs_1;
    reg or_itm_1;
    reg aif_5_slc_svs_st;
    reg land_lpi_1_dfm_st;
    reg else_1_land_2_lpi_1_dfm_st;
    reg else_1_aif_1_slc_svs_st;
    reg land_1_lpi_1_dfm_st_1;
    reg aif_5_slc_svs_st_1;
    reg land_lpi_1_dfm_st_1;
    reg else_1_land_2_lpi_1_dfm_st_1;
    reg else_1_aif_1_slc_svs_st_1;
    reg main_stage_0_2;
    reg main_stage_0_3;

    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        acc_3_1_sva = 4'b0;
        main_stage_0_2 = 1'b0;
        main_stage_0_3 = 1'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            if ( main_stage_0_3 ) begin
              blue_out_sg1_sva = 8'b0;
              green_out_sg1_sva = 8'b0;
              red_out_sg1_sva = 8'b0;
              acc_3_1_sva_2 = 4'b0;
              else_1_aif_2_land_sva_1 = 1'b0;
              else_1_aif_1_land_sva_1 = 1'b0;
              if ( land_lpi_1_dfm_st_1 ) begin
              end
              else begin
                if ( else_1_land_2_lpi_1_dfm_st_1 ) begin
                  if ( else_1_aif_1_slc_svs_st_1 ) begin
                  end
                  else begin
                    else_1_aif_1_land_sva_1 = ~ (readslicef_8_1_7((conv_u2s_7_8(~
                        (vin[18:12])) + 8'b11110001)));
                  end
                end
                else_1_land_1_lpi_1_dfm = else_1_aif_1_land_sva_1 & (~ else_1_aif_1_slc_svs_1)
                    & else_1_land_2_lpi_1_dfm_2;
                if ( else_1_land_1_lpi_1_dfm ) begin
                  else_1_aif_2_slc_svs = readslicef_9_1_8((conv_u2s_8_9(vin[9:2])
                      + 9'b111001111));
                  if ( else_1_aif_2_slc_svs ) begin
                  end
                  else begin
                    else_1_aif_2_land_sva_1 = ~ (readslicef_8_1_7((({1'b1 , (~ (vin[9:3]))})
                        + 8'b1001011)));
                  end
                end
                else_1_land_lpi_1_dfm = else_1_aif_2_land_sva_1 & (~ else_1_aif_2_slc_svs)
                    & else_1_land_1_lpi_1_dfm;
                if ( else_1_land_lpi_1_dfm ) begin
                  acc_3_1_sva_2 = acc_3_1_sva_dfm_3 + 4'b1;
                end
              end
              acc_3_1_sva_dfm_2 = MUX_v_4_2_2({acc_3_1_sva_dfm_3 , acc_3_1_sva_2},
                  else_1_land_lpi_1_dfm & (~ land_lpi_1_dfm_1));
              if ( acc_3_1_sva_dfm_2[3] ) begin
                red_out_sg1_sva = vin[29:22];
                green_out_sg1_sva = vin[19:12];
                blue_out_sg1_sva = vin[9:2];
              end
              vout_rsc_mgc_out_stdreg_d <= {(red_out_sg1_sva & (signext_8_1(acc_3_1_sva_dfm_2[3])))
                  , 2'b0 , (green_out_sg1_sva & (signext_8_1(acc_3_1_sva_dfm_2[3])))
                  , 2'b0 , (blue_out_sg1_sva & (signext_8_1(acc_3_1_sva_dfm_2[3])))
                  , 2'b0};
              acc_3_1_sva = acc_3_1_sva_dfm_2;
            end
            if ( main_stage_0_2 ) begin
              else_1_land_2_sva_1 = 1'b0;
              aif_5_land_sva_1 = 1'b0;
              acc_3_1_sva_dfm = acc_3_1_sva & ({{3{or_itm_1}}, or_itm_1});
              if ( land_1_lpi_1_dfm_st_1 ) begin
                if ( aif_5_slc_svs_st_1 ) begin
                end
                else begin
                  aif_5_land_sva_1 = ~ (readslicef_9_1_8((({1'b1 , (~ (vin[9:2]))})
                      + 9'b1101101)));
                end
              end
              land_lpi_1_dfm = aif_5_land_sva_1 & (~ aif_5_slc_svs_1) & land_1_lpi_1_dfm_1;
              land_lpi_1_dfm_st = land_lpi_1_dfm;
              if ( land_lpi_1_dfm ) begin
              end
              else begin
                else_1_slc_svs = readslicef_9_1_8((conv_u2s_8_9(vin[29:22]) + 9'b101011011));
                if ( else_1_slc_svs ) begin
                end
                else begin
                  else_1_land_2_sva_1 = ~ (readslicef_8_1_7((conv_u2s_7_8(~ (vin[28:22]))
                      + 8'b11011111)));
                end
                else_1_land_2_lpi_1_dfm = else_1_land_2_sva_1 & (~ else_1_slc_svs);
                else_1_land_2_lpi_1_dfm_st = else_1_land_2_lpi_1_dfm;
                if ( else_1_land_2_lpi_1_dfm ) begin
                  else_1_aif_1_slc_svs = readslicef_9_1_8((conv_u2s_8_9(vin[19:12])
                      + 9'b101000111));
                  else_1_aif_1_slc_svs_st = else_1_aif_1_slc_svs;
                end
              end
            end
            aif_1_land_sva_1 = 1'b0;
            land_2_sva_1 = 1'b0;
            acc_imod_sva = conv_s2s_5_6(({3'b100 , (vga_xy[9:8])}) + conv_u2s_4_5(readslicef_5_4_1((conv_u2u_4_5({(vga_xy[2:0])
                , 1'b1}) + conv_u2u_4_5(vga_xy[6:3]))))) + conv_u2s_5_6({(conv_u2u_1_2(~
                (vga_xy[3])) + conv_u2u_1_2(~ (vga_xy[7]))) , 2'b0 , (readslicef_2_1_1((conv_u2u_1_2(vga_xy[7])
                + 2'b1)))});
            if_acc_1_psp_sva = (readslicef_5_4_1((({(~ (acc_imod_sva[3])) , 4'b1})
                + conv_s2u_3_5(acc_imod_sva[5:3])))) + ({1'b1 , (acc_imod_sva[2:0])});
            if_acc_svs = conv_s2u_1_4(if_acc_1_psp_sva[3]) + if_acc_1_psp_sva;
            slc_svs = readslicef_5_1_4((conv_u2u_4_5(vin[29:26]) + 5'b11011));
            if ( slc_svs ) begin
            end
            else begin
              land_2_sva_1 = ~ (readslicef_8_1_7((({1'b1 , (~ (vin[29:23]))}) + 8'b1001001)));
            end
            land_2_lpi_1_dfm = land_2_sva_1 & (~ slc_svs);
            if ( land_2_lpi_1_dfm ) begin
              aif_1_slc_svs = readslicef_8_1_7((conv_u2u_7_8(vin[19:13]) + 8'b10110101));
              if ( aif_1_slc_svs ) begin
              end
              else begin
                aif_1_land_sva_1 = ~ (readslicef_8_1_7((conv_u2s_7_8(~ (vin[18:12]))
                    + 8'b11100111)));
              end
            end
            land_1_lpi_1_dfm = aif_1_land_sva_1 & (~ aif_1_slc_svs) & land_2_lpi_1_dfm;
            if ( land_1_lpi_1_dfm ) begin
              aif_5_slc_svs = readslicef_8_1_7((conv_u2u_7_8(vin[9:3]) + 8'b11110001));
              aif_5_slc_svs_st = aif_5_slc_svs;
            end
            acc_3_1_sva_dfm_3 = acc_3_1_sva_dfm;
            land_1_lpi_1_dfm_1 = land_1_lpi_1_dfm;
            aif_5_slc_svs_1 = aif_5_slc_svs;
            land_lpi_1_dfm_1 = land_lpi_1_dfm;
            else_1_land_2_lpi_1_dfm_2 = else_1_land_2_lpi_1_dfm;
            else_1_aif_1_slc_svs_1 = else_1_aif_1_slc_svs;
            or_itm_1 = (if_acc_svs[3]) | (if_acc_svs[2]) | (if_acc_svs[1]) | (if_acc_svs[0]);
            land_1_lpi_1_dfm_st_1 = land_1_lpi_1_dfm;
            aif_5_slc_svs_st_1 = aif_5_slc_svs_st;
            land_lpi_1_dfm_st_1 = land_lpi_1_dfm_st;
            else_1_land_2_lpi_1_dfm_st_1 = else_1_land_2_lpi_1_dfm_st;
            else_1_aif_1_slc_svs_st_1 = else_1_aif_1_slc_svs_st;
            main_stage_0_3 = main_stage_0_2;
            main_stage_0_2 = 1'b1;
          end
        end
      end
    end
    main_stage_0_3 = 1'b0;
    main_stage_0_2 = 1'b0;
    else_1_aif_1_slc_svs_st_1 = 1'b0;
    else_1_land_2_lpi_1_dfm_st_1 = 1'b0;
    land_lpi_1_dfm_st_1 = 1'b0;
    aif_5_slc_svs_st_1 = 1'b0;
    land_1_lpi_1_dfm_st_1 = 1'b0;
    else_1_aif_1_slc_svs_st = 1'b0;
    else_1_land_2_lpi_1_dfm_st = 1'b0;
    land_lpi_1_dfm_st = 1'b0;
    aif_5_slc_svs_st = 1'b0;
    or_itm_1 = 1'b0;
    else_1_aif_1_slc_svs_1 = 1'b0;
    else_1_land_2_lpi_1_dfm_2 = 1'b0;
    land_lpi_1_dfm_1 = 1'b0;
    aif_5_slc_svs_1 = 1'b0;
    land_1_lpi_1_dfm_1 = 1'b0;
    acc_3_1_sva_dfm_3 = 4'b0;
    blue_out_sg1_sva = 8'b0;
    green_out_sg1_sva = 8'b0;
    red_out_sg1_sva = 8'b0;
    acc_3_1_sva_dfm_2 = 4'b0;
    acc_3_1_sva_2 = 4'b0;
    else_1_land_lpi_1_dfm = 1'b0;
    else_1_aif_2_land_sva_1 = 1'b0;
    else_1_aif_2_slc_svs = 1'b0;
    else_1_land_1_lpi_1_dfm = 1'b0;
    else_1_aif_1_land_sva_1 = 1'b0;
    else_1_aif_1_slc_svs = 1'b0;
    else_1_land_2_lpi_1_dfm = 1'b0;
    else_1_land_2_sva_1 = 1'b0;
    else_1_slc_svs = 1'b0;
    land_lpi_1_dfm = 1'b0;
    aif_5_land_sva_1 = 1'b0;
    aif_5_slc_svs = 1'b0;
    land_1_lpi_1_dfm = 1'b0;
    aif_1_land_sva_1 = 1'b0;
    aif_1_slc_svs = 1'b0;
    land_2_lpi_1_dfm = 1'b0;
    land_2_sva_1 = 1'b0;
    slc_svs = 1'b0;
    acc_3_1_sva_dfm = 4'b0;
    if_acc_svs = 4'b0;
    if_acc_1_psp_sva = 4'b0;
    acc_imod_sva = 6'b0;
    acc_3_1_sva = 4'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_s2u_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function  [3:0] conv_s2u_1_4 ;
    input signed [0:0]  vector ;
  begin
    conv_s2u_1_4 = {{3{vector[0]}}, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    markers
//  Generated from file(s):
//    2) $PROJECT_HOME/../markers_source/blur.c
// ------------------------------------------------------------------


module markers (
  vin, vout_rsc_z, vga_xy, volume_rsc_z, clk, en, arst_n
);
  input [89:0] vin;
  output [29:0] vout_rsc_z;
  input [19:0] vga_xy;
  output [7:0] volume_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(8)) volume_rsc_mgc_out_stdreg (
      .d(8'b0),
      .z(volume_rsc_z)
    );
  markers_core markers_core_inst (
      .vin(vin),
      .vga_xy(vga_xy),
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



