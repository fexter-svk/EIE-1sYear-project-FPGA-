// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   mf2915@EEWS104A-015
//  Generated date: Wed May 04 14:55:17 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    markers_core
// ------------------------------------------------------------------


module markers_core (
  vin, vga_xy, clk, en, arst_n, vout_rsc_mgc_out_stdreg_d
);
  input [89:0] vin;
  input [19:0] vga_xy;
  input clk;
  input en;
  input arst_n;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire or_dcpl_18;
  reg [3:0] acc_3_1_sva;
  reg aif_1_slc_svs;
  reg [3:0] acc_3_1_sva_dfm_3;
  reg land_1_lpi_1_dfm_1;
  reg aif_5_slc_svs_1;
  reg land_lpi_1_dfm_1;
  reg else_1_land_2_lpi_1_dfm_2;
  reg else_1_aif_1_slc_svs_1;
  reg or_itm_1;
  reg main_stage_0_2;
  reg main_stage_0_3;
  wire [7:0] else_1_aif_acc_itm;
  wire [8:0] nl_else_1_aif_acc_itm;
  wire [8:0] else_1_acc_itm;
  wire [9:0] nl_else_1_acc_itm;
  wire [8:0] aif_5_aif_acc_itm;
  wire [9:0] nl_aif_5_aif_acc_itm;
  wire [7:0] aif_1_aif_acc_itm;
  wire [8:0] nl_aif_1_aif_acc_itm;
  wire [7:0] if_1_acc_4_itm;
  wire [8:0] nl_if_1_acc_4_itm;
  wire [7:0] if_1_acc_3_itm;
  wire [4:0] if_1_acc_2_itm;
  wire [5:0] nl_if_1_acc_2_itm;
  wire [3:0] acc_3_1_sva_dfm_2_mx0;
  wire aif_1_slc_svs_mx0;
  wire [3:0] acc_3_1_sva_mx0;
  wire [3:0] if_acc_svs;
  wire [4:0] nl_if_acc_svs;
  wire [3:0] if_acc_1_psp_sva;
  wire [4:0] nl_if_acc_1_psp_sva;
  wire [5:0] acc_imod_sva;
  wire [6:0] nl_acc_imod_sva;


  // Interconnect Declarations for Component Instantiations 
  assign acc_3_1_sva_dfm_2_mx0 = MUX_v_4_2_2({(acc_3_1_sva_dfm_3 + 4'b1) , acc_3_1_sva_dfm_3},
      (readslicef_8_1_7((conv_u2s_7_8(~ (vin[18:12])) + 8'b11110001))) | (~ else_1_land_2_lpi_1_dfm_2)
      | else_1_aif_1_slc_svs_1 | land_lpi_1_dfm_1 | (readslicef_9_1_8((conv_u2s_8_9(vin[9:2])
      + 9'b111001111))) | (readslicef_7_1_6(((~ (vin[9:3])) + 7'b1001011))));
  assign nl_else_1_aif_acc_itm = conv_u2s_7_8(~ (vin[28:22])) + 8'b11011111;
  assign else_1_aif_acc_itm = nl_else_1_aif_acc_itm[7:0];
  assign nl_else_1_acc_itm = conv_u2s_8_9(vin[29:22]) + 9'b101011011;
  assign else_1_acc_itm = nl_else_1_acc_itm[8:0];
  assign nl_aif_5_aif_acc_itm = ({1'b1 , (~ (vin[9:2]))}) + 9'b1101101;
  assign aif_5_aif_acc_itm = nl_aif_5_aif_acc_itm[8:0];
  assign nl_aif_1_aif_acc_itm = conv_u2s_7_8(~ (vin[18:12])) + 8'b11100111;
  assign aif_1_aif_acc_itm = nl_aif_1_aif_acc_itm[7:0];
  assign nl_if_1_acc_4_itm = conv_u2u_7_8(vin[19:13]) + 8'b10110101;
  assign if_1_acc_4_itm = nl_if_1_acc_4_itm[7:0];
  assign aif_1_slc_svs_mx0 = MUX_s_1_2_2({(if_1_acc_4_itm[7]) , aif_1_slc_svs}, or_dcpl_18);
  assign if_1_acc_3_itm = signext_8_7((~ (vin[29:23])) + 7'b1001001);
  assign nl_if_1_acc_2_itm = conv_u2u_4_5(vin[29:26]) + 5'b11011;
  assign if_1_acc_2_itm = nl_if_1_acc_2_itm[4:0];
  assign acc_3_1_sva_mx0 = MUX_v_4_2_2({acc_3_1_sva , acc_3_1_sva_dfm_2_mx0}, main_stage_0_3);
  assign nl_if_acc_svs = conv_s2u_1_4(if_acc_1_psp_sva[3]) + if_acc_1_psp_sva;
  assign if_acc_svs = nl_if_acc_svs[3:0];
  assign nl_if_acc_1_psp_sva = (readslicef_5_4_1((({(~ (acc_imod_sva[3])) , 4'b1})
      + conv_s2u_3_5(acc_imod_sva[5:3])))) + ({1'b1 , (acc_imod_sva[2:0])});
  assign if_acc_1_psp_sva = nl_if_acc_1_psp_sva[3:0];
  assign nl_acc_imod_sva = conv_s2s_5_6(({3'b100 , (vga_xy[9:8])}) + conv_u2s_4_5(readslicef_5_4_1((conv_u2u_4_5({(vga_xy[2:0])
      , 1'b1}) + conv_u2u_4_5(vga_xy[6:3]))))) + conv_u2s_5_6({(conv_u2u_1_2(~ (vga_xy[3]))
      + conv_u2u_1_2(~ (vga_xy[7]))) , 2'b0 , (readslicef_2_1_1((conv_u2u_1_2(vga_xy[7])
      + 2'b1)))});
  assign acc_imod_sva = nl_acc_imod_sva[5:0];
  assign or_dcpl_18 = (if_1_acc_2_itm[4]) | (if_1_acc_3_itm[6]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      acc_3_1_sva_dfm_3 <= 4'b0;
      else_1_aif_1_slc_svs_1 <= 1'b0;
      else_1_land_2_lpi_1_dfm_2 <= 1'b0;
      land_lpi_1_dfm_1 <= 1'b0;
      aif_5_slc_svs_1 <= 1'b0;
      land_1_lpi_1_dfm_1 <= 1'b0;
      aif_1_slc_svs <= 1'b0;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      acc_3_1_sva <= 4'b0;
      or_itm_1 <= 1'b0;
    end
    else begin
      if ( en ) begin
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({vout_rsc_mgc_out_stdreg_d , ({((vin[29:22])
            & (signext_8_1(acc_3_1_sva_dfm_2_mx0[3]))) , 2'b0 , ((vin[19:12]) & (signext_8_1(acc_3_1_sva_dfm_2_mx0[3])))
            , 2'b0 , ((vin[9:2]) & (signext_8_1(acc_3_1_sva_dfm_2_mx0[3]))) , 2'b0})},
            main_stage_0_3);
        acc_3_1_sva_dfm_3 <= acc_3_1_sva_mx0 & ({{3{or_itm_1}}, or_itm_1});
        else_1_aif_1_slc_svs_1 <= MUX_s_1_2_2({(readslicef_9_1_8((conv_u2s_8_9(vin[19:12])
            + 9'b101000111))) , else_1_aif_1_slc_svs_1}, ((~ (aif_5_aif_acc_itm[8]))
            & land_1_lpi_1_dfm_1 & (~ aif_5_slc_svs_1)) | (~ main_stage_0_2) | (else_1_acc_itm[8])
            | (else_1_aif_acc_itm[7]));
        else_1_land_2_lpi_1_dfm_2 <= ~((else_1_aif_acc_itm[7]) | (else_1_acc_itm[8]));
        land_lpi_1_dfm_1 <= (~ (aif_5_aif_acc_itm[8])) & (~ aif_5_slc_svs_1) & land_1_lpi_1_dfm_1;
        aif_5_slc_svs_1 <= MUX_s_1_2_2({(readslicef_8_1_7((conv_u2u_7_8(vin[9:3])
            + 8'b11110001))) , aif_5_slc_svs_1}, or_dcpl_18 | (if_1_acc_4_itm[7])
            | (aif_1_aif_acc_itm[7]));
        land_1_lpi_1_dfm_1 <= ~((aif_1_aif_acc_itm[7]) | aif_1_slc_svs_mx0 | (if_1_acc_3_itm[6])
            | (if_1_acc_2_itm[4]));
        aif_1_slc_svs <= aif_1_slc_svs_mx0;
        main_stage_0_2 <= 1'b1;
        main_stage_0_3 <= main_stage_0_2;
        acc_3_1_sva <= acc_3_1_sva_mx0;
        or_itm_1 <= (if_acc_svs[3]) | (if_acc_svs[2]) | (if_acc_svs[1]) | (if_acc_svs[0]);
      end
    end
  end

  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [7:0] signext_8_7;
    input [6:0] vector;
  begin
    signext_8_7= {{1{vector[6]}}, vector};
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_s2u_1_4 ;
    input signed [0:0]  vector ;
  begin
    conv_s2u_1_4 = {{3{vector[0]}}, vector};
  end
  endfunction


  function  [4:0] conv_s2u_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    markers
//  Generated from file(s):
//    2) $PROJECT_HOME/../markers_source/blur.c
// ------------------------------------------------------------------


module markers (
  vin, vout_rsc_z, vga_xy, volume_rsc_z, clk, en, arst_n
);
  input [89:0] vin;
  output [29:0] vout_rsc_z;
  input [19:0] vga_xy;
  output [7:0] volume_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(8)) volume_rsc_mgc_out_stdreg (
      .d(8'b0),
      .z(volume_rsc_z)
    );
  markers_core markers_core_inst (
      .vin(vin),
      .vga_xy(vga_xy),
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



