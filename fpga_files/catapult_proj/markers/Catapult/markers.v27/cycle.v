// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   mf2915@EEWS104A-015
//  Generated date: Tue May 03 15:24:57 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    markers_core
// ------------------------------------------------------------------


module markers_core (
  vin, clk, en, arst_n, vout_rsc_mgc_out_stdreg_d
);
  input [89:0] vin;
  input clk;
  input en;
  input arst_n;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg slc_svs;
    reg land_2_sva_1;
    reg land_2_lpi_dfm;
    reg aif_1_slc_svs;
    reg aif_1_land_sva_1;
    reg land_1_lpi_dfm;
    reg aif_5_slc_svs;
    reg aif_5_land_sva_1;
    reg land_lpi_dfm;
    reg [9:0] red_out_sva_1;
    reg [9:0] green_out_sva_1;
    reg [9:0] blue_out_sva_1;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        blue_out_sva_1 = 10'b0;
        green_out_sva_1 = 10'b0;
        red_out_sva_1 = 10'b0;
        aif_5_land_sva_1 = 1'b0;
        aif_1_land_sva_1 = 1'b0;
        land_2_sva_1 = 1'b0;
        slc_svs = readslicef_7_1_6((conv_u2u_6_7(vin[29:24]) + 7'b1111011));
        if ( slc_svs ) begin
        end
        else begin
          land_2_sva_1 = ~ (readslicef_10_1_9((({1'b1 , (~ (vin[29:21]))}) + 10'b1001001)));
        end
        land_2_lpi_dfm = land_2_sva_1 & (~ slc_svs);
        if ( land_2_lpi_dfm ) begin
          aif_1_slc_svs = readslicef_10_1_9((conv_u2u_9_10(vin[19:11]) + 10'b1110110101));
          if ( aif_1_slc_svs ) begin
          end
          else begin
            aif_1_land_sva_1 = ~ (readslicef_11_1_10((({1'b1 , (~ (vin[19:10]))})
                + 11'b11100111)));
          end
        end
        land_1_lpi_dfm = aif_1_land_sva_1 & (~ aif_1_slc_svs) & land_2_lpi_dfm;
        if ( land_1_lpi_dfm ) begin
          aif_5_slc_svs = readslicef_10_1_9((conv_u2u_9_10(vin[9:1]) + 10'b1111110001));
          if ( aif_5_slc_svs ) begin
          end
          else begin
            aif_5_land_sva_1 = ~ (readslicef_11_1_10((({1'b1 , (~ (vin[9:0]))}) +
                11'b1101101)));
          end
        end
        land_lpi_dfm = aif_5_land_sva_1 & (~ aif_5_slc_svs) & land_1_lpi_dfm;
        if ( land_lpi_dfm ) begin
        end
        else begin
          red_out_sva_1 = vin[29:20];
          green_out_sva_1 = vin[19:10];
          blue_out_sva_1 = vin[9:0];
        end
        vout_rsc_mgc_out_stdreg_d <= {(red_out_sva_1 & (signext_10_1(~ land_lpi_dfm)))
            , (green_out_sva_1 & (signext_10_1(~ land_lpi_dfm))) , (blue_out_sva_1
            & (signext_10_1(~ land_lpi_dfm)))};
      end
    end
    blue_out_sva_1 = 10'b0;
    green_out_sva_1 = 10'b0;
    red_out_sva_1 = 10'b0;
    land_lpi_dfm = 1'b0;
    aif_5_land_sva_1 = 1'b0;
    aif_5_slc_svs = 1'b0;
    land_1_lpi_dfm = 1'b0;
    aif_1_land_sva_1 = 1'b0;
    aif_1_slc_svs = 1'b0;
    land_2_lpi_dfm = 1'b0;
    land_2_sva_1 = 1'b0;
    slc_svs = 1'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    markers
//  Generated from file(s):
//    2) $PROJECT_HOME/../markers_source/blur.c
// ------------------------------------------------------------------


module markers (
  vin, vout_rsc_z, vga_xy, volume_rsc_z, clk, en, arst_n
);
  input [89:0] vin;
  output [29:0] vout_rsc_z;
  input [19:0] vga_xy;
  output [7:0] volume_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(8)) volume_rsc_mgc_out_stdreg (
      .d(8'b0),
      .z(volume_rsc_z)
    );
  markers_core markers_core_inst (
      .vin(vin),
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



