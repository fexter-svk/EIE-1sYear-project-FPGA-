// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   mf2915@EEWS104A-015
//  Generated date: Wed May 04 11:40:24 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    markers_core
// ------------------------------------------------------------------


module markers_core (
  vin, clk, en, arst_n, vout_rsc_mgc_out_stdreg_d
);
  input [89:0] vin;
  input clk;
  input en;
  input arst_n;
  output [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire or_dcpl_16;
  reg else_aif_1_slc_svs;
  reg else_aif_2_slc_svs;
  wire or_17_cse;
  wire and_4_cse;
  wire or_14_cse;
  reg [7:0] reg_vout_rsc_mgc_out_stdreg_d_tmp;
  reg [7:0] reg_vout_rsc_mgc_out_stdreg_d_tmp_1;
  reg [7:0] reg_vout_rsc_mgc_out_stdreg_d_tmp_2;
  wire [5:0] else_if_acc_1_itm;
  wire [6:0] nl_else_if_acc_1_itm;
  wire [8:0] else_aif_1_acc_itm;
  wire [9:0] nl_else_aif_1_acc_itm;
  wire [7:0] else_aif_acc_itm;
  wire [8:0] nl_else_aif_acc_itm;
  wire [7:0] else_if_acc_itm;
  wire [8:0] nl_else_if_acc_itm;
  wire [7:0] if_acc_3_itm;
  wire [8:0] nl_if_acc_3_itm;
  wire [7:0] if_acc_2_itm;
  wire [8:0] nl_if_acc_2_itm;
  wire [8:0] aif_5_aif_acc_itm;
  wire [9:0] nl_aif_5_aif_acc_itm;
  wire [7:0] aif_1_aif_acc_itm;
  wire [8:0] nl_aif_1_aif_acc_itm;
  wire [7:0] if_acc_1_itm;
  wire [4:0] if_acc_itm;
  wire [5:0] nl_if_acc_itm;
  wire [8:0] else_aif_2_acc_itm;
  wire [9:0] nl_else_aif_2_acc_itm;
  wire else_if_nor_itm;

  wire[0:0] mux_3_nl;
  wire[0:0] mux_5_nl;

  // Interconnect Declarations for Component Instantiations 
  assign and_4_cse = (~((if_acc_itm[4]) | (if_acc_1_itm[6]) | (if_acc_2_itm[7])))
      & (~((aif_1_aif_acc_itm[7]) | (if_acc_3_itm[7]) | (aif_5_aif_acc_itm[8])));
  assign vout_rsc_mgc_out_stdreg_d = {reg_vout_rsc_mgc_out_stdreg_d_tmp , 2'b0 ,
      reg_vout_rsc_mgc_out_stdreg_d_tmp_1 , 2'b0 , reg_vout_rsc_mgc_out_stdreg_d_tmp_2
      , 2'b0};
  assign nl_else_aif_2_acc_itm = conv_u2s_8_9(vin[9:2]) + 9'b111001111;
  assign else_aif_2_acc_itm = nl_else_aif_2_acc_itm[8:0];
  assign nl_else_if_acc_1_itm = conv_u2s_5_6(~ (vin[18:14])) + 6'b111011;
  assign else_if_acc_1_itm = nl_else_if_acc_1_itm[5:0];
  assign nl_else_aif_1_acc_itm = conv_u2s_8_9(vin[19:12]) + 9'b101000111;
  assign else_aif_1_acc_itm = nl_else_aif_1_acc_itm[8:0];
  assign nl_else_aif_acc_itm = conv_u2s_7_8(~ (vin[28:22])) + 8'b11011111;
  assign else_aif_acc_itm = nl_else_aif_acc_itm[7:0];
  assign nl_else_if_acc_itm = conv_u2u_7_8(vin[29:23]) + 8'b10101011;
  assign else_if_acc_itm = nl_else_if_acc_itm[7:0];
  assign nl_if_acc_3_itm = conv_u2u_7_8(vin[9:3]) + 8'b11110001;
  assign if_acc_3_itm = nl_if_acc_3_itm[7:0];
  assign nl_if_acc_2_itm = conv_u2u_7_8(vin[19:13]) + 8'b10110101;
  assign if_acc_2_itm = nl_if_acc_2_itm[7:0];
  assign or_14_cse = (if_acc_itm[4]) | (if_acc_1_itm[6]) | (if_acc_2_itm[7]) | (aif_1_aif_acc_itm[7])
      | (if_acc_3_itm[7]) | (aif_5_aif_acc_itm[8]);
  assign mux_3_nl = MUX_s_1_2_2({(else_aif_2_acc_itm[8]) , else_aif_2_slc_svs}, or_17_cse);
  assign mux_5_nl = MUX_s_1_2_2({(else_aif_1_acc_itm[8]) , else_aif_1_slc_svs}, or_dcpl_16);
  assign else_if_nor_itm = ~((readslicef_7_1_6(((~ (vin[9:3])) + 7'b1001011))) |
      (mux_3_nl) | (else_if_acc_1_itm[5]) | (mux_5_nl) | (else_aif_acc_itm[7]) |
      (else_if_acc_itm[7]));
  assign nl_aif_5_aif_acc_itm = ({1'b1 , (~ (vin[9:2]))}) + 9'b1101101;
  assign aif_5_aif_acc_itm = nl_aif_5_aif_acc_itm[8:0];
  assign nl_aif_1_aif_acc_itm = conv_u2s_7_8(~ (vin[18:12])) + 8'b11100111;
  assign aif_1_aif_acc_itm = nl_aif_1_aif_acc_itm[7:0];
  assign if_acc_1_itm = signext_8_7((~ (vin[29:23])) + 7'b1001001);
  assign nl_if_acc_itm = conv_u2u_4_5(vin[29:26]) + 5'b11011;
  assign if_acc_itm = nl_if_acc_itm[4:0];
  assign or_dcpl_16 = (else_if_acc_itm[7]) | (else_aif_acc_itm[7]);
  assign or_17_cse = or_dcpl_16 | (else_aif_1_acc_itm[8]) | (else_if_acc_1_itm[5]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      else_aif_2_slc_svs <= 1'b0;
      else_aif_1_slc_svs <= 1'b0;
      reg_vout_rsc_mgc_out_stdreg_d_tmp <= 8'b0;
      reg_vout_rsc_mgc_out_stdreg_d_tmp_1 <= 8'b0;
      reg_vout_rsc_mgc_out_stdreg_d_tmp_2 <= 8'b0;
    end
    else begin
      if ( en ) begin
        else_aif_2_slc_svs <= MUX_s_1_2_2({(else_aif_2_acc_itm[8]) , else_aif_2_slc_svs},
            and_4_cse | or_17_cse);
        else_aif_1_slc_svs <= MUX_s_1_2_2({(else_aif_1_acc_itm[8]) , else_aif_1_slc_svs},
            and_4_cse | or_dcpl_16);
        reg_vout_rsc_mgc_out_stdreg_d_tmp <= MUX_v_8_2_2({(vin[29:22]) , ((vin[29:22])
            & ({{7{else_if_nor_itm}}, else_if_nor_itm}))}, or_14_cse);
        reg_vout_rsc_mgc_out_stdreg_d_tmp_1 <= MUX_v_8_2_2({(vin[19:12]) , ((vin[19:12])
            & ({{7{else_if_nor_itm}}, else_if_nor_itm}))}, or_14_cse);
        reg_vout_rsc_mgc_out_stdreg_d_tmp_2 <= MUX_v_8_2_2({(vin[9:2]) , ((vin[9:2])
            & ({{7{else_if_nor_itm}}, else_if_nor_itm}))}, or_14_cse);
      end
    end
  end

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [7:0] signext_8_7;
    input [6:0] vector;
  begin
    signext_8_7= {{1{vector[6]}}, vector};
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    markers
//  Generated from file(s):
//    2) $PROJECT_HOME/../markers_source/blur.c
// ------------------------------------------------------------------


module markers (
  vin, vout_rsc_z, vga_xy, volume_rsc_z, clk, en, arst_n
);
  input [89:0] vin;
  output [29:0] vout_rsc_z;
  input [19:0] vga_xy;
  output [7:0] volume_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(8)) volume_rsc_mgc_out_stdreg (
      .d(8'b0),
      .z(volume_rsc_z)
    );
  markers_core markers_core_inst (
      .vin(vin),
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



