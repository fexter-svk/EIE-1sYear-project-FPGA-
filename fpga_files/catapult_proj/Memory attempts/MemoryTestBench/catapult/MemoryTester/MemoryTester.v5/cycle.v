// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-014
//  Generated date: Fri May 06 15:25:36 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core
// ------------------------------------------------------------------


module MemoryTester_core (
  clk, rst, bit_out_rsc_mgc_out_stdreg_d, row_rsc_mgc_out_stdreg_d, col_rsc_mgc_inout_stdreg_en_ldout,
      col_rsc_mgc_inout_stdreg_en_dout
);
  input clk;
  input rst;
  output bit_out_rsc_mgc_out_stdreg_d;
  reg bit_out_rsc_mgc_out_stdreg_d;
  output [5:0] row_rsc_mgc_out_stdreg_d;
  reg [5:0] row_rsc_mgc_out_stdreg_d;
  output col_rsc_mgc_inout_stdreg_en_ldout;
  reg col_rsc_mgc_inout_stdreg_en_ldout;
  output [6:0] col_rsc_mgc_inout_stdreg_en_dout;
  reg [6:0] col_rsc_mgc_inout_stdreg_en_dout;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [5:0] if_for_i_1_sva;
    reg [6:0] if_for_for_j_1_sva;
    reg [6:0] if_for_for_j_1_sva_1;
    reg [5:0] if_for_i_1_sva_1;
    reg if_for_for_slc_itm;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        if_for_i_1_sva = 6'b0;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
        col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
        begin : waitLoop1Exit
          forever begin : waitLoop1
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop1Exit;
          end
        end
        // C-Step 2 of Loop 'main'
        col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
        col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
        begin : if_forExit
          forever begin : if_for
            // C-Step 0 of Loop 'if_for'
            if_for_for_j_1_sva = 7'b0;
            begin : if_for_forExit
              forever begin : if_for_for
                // C-Step 0 of Loop 'if_for_for'
                row_rsc_mgc_out_stdreg_d <= if_for_i_1_sva;
                col_rsc_mgc_inout_stdreg_en_ldout <= 1'b1;
                col_rsc_mgc_inout_stdreg_en_dout <= {1'b0, if_for_i_1_sva};
                begin : waitLoop2Exit
                  forever begin : waitLoop2
                    @(posedge clk);
                    if ( rst )
                      disable mainExit;
                    if ( clk )
                      disable waitLoop2Exit;
                  end
                end
                // C-Step 1 of Loop 'if_for_for'
                col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
                col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
                bit_out_rsc_mgc_out_stdreg_d <= (if_for_i_1_sva[2]) | (if_for_i_1_sva[1])
                    | (if_for_i_1_sva[0]);
                if_for_for_j_1_sva_1 = if_for_for_j_1_sva + 7'b1;
                if_for_for_slc_itm = readslicef_4_1_3((conv_u2s_3_4(if_for_for_j_1_sva_1[6:4])
                    + 4'b1011));
                begin : waitLoop3Exit
                  forever begin : waitLoop3
                    @(posedge clk);
                    if ( rst )
                      disable mainExit;
                    if ( clk )
                      disable waitLoop3Exit;
                  end
                end
                // C-Step 2 of Loop 'if_for_for'
                col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
                col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
                if ( ~ if_for_for_slc_itm )
                  disable if_for_forExit;
                if_for_for_j_1_sva = if_for_for_j_1_sva_1;
              end
            end
            begin : waitLoop4Exit
              forever begin : waitLoop4
                @(posedge clk);
                if ( rst )
                  disable mainExit;
                if ( clk )
                  disable waitLoop4Exit;
              end
            end
            // C-Step 1 of Loop 'if_for'
            col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
            col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
            if_for_i_1_sva_1 = if_for_i_1_sva + 6'b1;
            if ( ~ (readslicef_5_1_4((({1'b1 , (if_for_i_1_sva_1[5:2])}) + 5'b1)))
                )
              disable if_forExit;
            if_for_i_1_sva = if_for_i_1_sva_1;
          end
        end
      end
    end
    if_for_for_slc_itm = 1'b0;
    if_for_i_1_sva_1 = 6'b0;
    if_for_for_j_1_sva_1 = 7'b0;
    if_for_for_j_1_sva = 7'b0;
    if_for_i_1_sva = 6'b0;
    col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
    col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
    row_rsc_mgc_out_stdreg_d <= 6'b0;
    bit_out_rsc_mgc_out_stdreg_d <= 1'b0;
    col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
    col_rsc_mgc_inout_stdreg_en_dout <= 7'b0;
  end


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester
//  Generated from file(s):
//    2) $PROJECT_HOME/src/MemoryTester.cpp
// ------------------------------------------------------------------


module MemoryTester (
  bit_out_rsc_z, enabled_rsc_z, row_rsc_z, col_rsc_z, col_rsc_lzout, col_rsc_lzin,
      clk, rst
);
  output bit_out_rsc_z;
  output enabled_rsc_z;
  output [5:0] row_rsc_z;
  inout [6:0] col_rsc_z;
  output col_rsc_lzout;
  output col_rsc_lzin;
  input clk;
  input rst;


  // Interconnect Declarations
  wire bit_out_rsc_mgc_out_stdreg_d;
  wire [5:0] row_rsc_mgc_out_stdreg_d;
  wire [6:0] col_rsc_mgc_inout_stdreg_en_din;
  wire col_rsc_mgc_inout_stdreg_en_ldout;
  wire [6:0] col_rsc_mgc_inout_stdreg_en_dout;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(1)) bit_out_rsc_mgc_out_stdreg (
      .d(bit_out_rsc_mgc_out_stdreg_d),
      .z(bit_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(1)) enabled_rsc_mgc_out_stdreg (
      .d(1'b1),
      .z(enabled_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(6)) row_rsc_mgc_out_stdreg (
      .d(row_rsc_mgc_out_stdreg_d),
      .z(row_rsc_z)
    );
  mgc_inout_stdreg_en #(.rscid(4),
  .width(7)) col_rsc_mgc_inout_stdreg_en (
      .ldin(1'b0),
      .din(col_rsc_mgc_inout_stdreg_en_din),
      .ldout(col_rsc_mgc_inout_stdreg_en_ldout),
      .dout(col_rsc_mgc_inout_stdreg_en_dout),
      .lzin(col_rsc_lzin),
      .lzout(col_rsc_lzout),
      .z(col_rsc_z)
    );
  MemoryTester_core MemoryTester_core_inst (
      .clk(clk),
      .rst(rst),
      .bit_out_rsc_mgc_out_stdreg_d(bit_out_rsc_mgc_out_stdreg_d),
      .row_rsc_mgc_out_stdreg_d(row_rsc_mgc_out_stdreg_d),
      .col_rsc_mgc_inout_stdreg_en_ldout(col_rsc_mgc_inout_stdreg_en_ldout),
      .col_rsc_mgc_inout_stdreg_en_dout(col_rsc_mgc_inout_stdreg_en_dout)
    );
endmodule



