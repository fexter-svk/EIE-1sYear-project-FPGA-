// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-014
//  Generated date: Fri May 06 15:25:40 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module MemoryTester_core_fsm (
  clk, rst, fsm_output, st_if_for_for_1_tr0, st_if_for_tr0
);
  input clk;
  input rst;
  output [4:0] fsm_output;
  reg [4:0] fsm_output;
  input st_if_for_for_1_tr0;
  input st_if_for_tr0;


  // FSM State Type Declaration for MemoryTester_core_fsm_1
  parameter
    st_main = 3'd0,
    st_main_1 = 3'd1,
    st_if_for_for = 3'd2,
    st_if_for_for_1 = 3'd3,
    st_if_for = 3'd4,
    state_x = 3'b000;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : MemoryTester_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 5'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 5'b10;
        state_var_NS = st_if_for_for;
      end
      st_if_for_for : begin
        fsm_output = 5'b100;
        state_var_NS = st_if_for_for_1;
      end
      st_if_for_for_1 : begin
        fsm_output = 5'b1000;
        if ( st_if_for_for_1_tr0 ) begin
          state_var_NS = st_if_for;
        end
        else begin
          state_var_NS = st_if_for_for;
        end
      end
      st_if_for : begin
        fsm_output = 5'b10000;
        if ( st_if_for_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_if_for_for;
        end
      end
      default : begin
        fsm_output = 5'b00000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core
// ------------------------------------------------------------------


module MemoryTester_core (
  clk, rst, bit_out_rsc_mgc_out_stdreg_d, row_rsc_mgc_out_stdreg_d, col_rsc_mgc_inout_stdreg_en_ldout,
      col_rsc_mgc_inout_stdreg_en_dout
);
  input clk;
  input rst;
  output bit_out_rsc_mgc_out_stdreg_d;
  reg bit_out_rsc_mgc_out_stdreg_d;
  output [5:0] row_rsc_mgc_out_stdreg_d;
  reg [5:0] row_rsc_mgc_out_stdreg_d;
  output col_rsc_mgc_inout_stdreg_en_ldout;
  reg col_rsc_mgc_inout_stdreg_en_ldout;
  output [6:0] col_rsc_mgc_inout_stdreg_en_dout;


  // Interconnect Declarations
  wire [4:0] fsm_output;
  reg [5:0] if_for_i_1_sva;
  reg [6:0] if_for_for_j_1_sva;
  reg [6:0] if_for_for_j_1_sva_1;
  reg if_for_for_slc_itm;
  wire and_9_cse;
  wire and_cse;
  wire [4:0] if_for_acc_itm;
  wire [5:0] nl_if_for_acc_itm;
  wire [6:0] if_for_for_j_1_sva_2;
  wire [7:0] nl_if_for_for_j_1_sva_2;
  wire [5:0] if_for_i_1_sva_1;
  wire [6:0] nl_if_for_i_1_sva_1;
  wire nor_cse;


  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_MemoryTester_core_fsm_inst_st_if_for_for_1_tr0;
  assign nl_MemoryTester_core_fsm_inst_st_if_for_for_1_tr0 = ~ if_for_for_slc_itm;
  wire [0:0] nl_MemoryTester_core_fsm_inst_st_if_for_tr0;
  assign nl_MemoryTester_core_fsm_inst_st_if_for_tr0 = ~ (if_for_acc_itm[4]);
  MemoryTester_core_fsm MemoryTester_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_if_for_for_1_tr0(nl_MemoryTester_core_fsm_inst_st_if_for_for_1_tr0),
      .st_if_for_tr0(nl_MemoryTester_core_fsm_inst_st_if_for_tr0)
    );
  assign nor_cse = ~((fsm_output[4]) | (fsm_output[1]));
  assign col_rsc_mgc_inout_stdreg_en_dout = {1'b0, if_for_i_1_sva};
  assign and_9_cse = (if_for_acc_itm[4]) & (fsm_output[4]);
  assign and_cse = if_for_for_slc_itm & (fsm_output[3]);
  assign nl_if_for_for_j_1_sva_2 = if_for_for_j_1_sva + 7'b1;
  assign if_for_for_j_1_sva_2 = nl_if_for_for_j_1_sva_2[6:0];
  assign nl_if_for_i_1_sva_1 = if_for_i_1_sva + 6'b1;
  assign if_for_i_1_sva_1 = nl_if_for_i_1_sva_1[5:0];
  assign nl_if_for_acc_itm = ({1'b1 , (if_for_i_1_sva_1[5:2])}) + 5'b1;
  assign if_for_acc_itm = nl_if_for_acc_itm[4:0];
  always @(posedge clk) begin
    if ( rst ) begin
      if_for_i_1_sva <= 6'b0;
      bit_out_rsc_mgc_out_stdreg_d <= 1'b0;
      col_rsc_mgc_inout_stdreg_en_ldout <= 1'b0;
      row_rsc_mgc_out_stdreg_d <= 6'b0;
      if_for_for_j_1_sva <= 7'b0;
      if_for_for_slc_itm <= 1'b0;
      if_for_for_j_1_sva_1 <= 7'b0;
    end
    else begin
      if_for_i_1_sva <= (MUX_v_6_2_2({if_for_i_1_sva_1 , if_for_i_1_sva}, nor_cse))
          & (signext_6_1(~ (fsm_output[1])));
      bit_out_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({bit_out_rsc_mgc_out_stdreg_d ,
          ((if_for_i_1_sva[2]) | (if_for_i_1_sva[1]) | (if_for_i_1_sva[0]))}, fsm_output[2]);
      col_rsc_mgc_inout_stdreg_en_ldout <= and_cse | and_9_cse | (fsm_output[1]);
      row_rsc_mgc_out_stdreg_d <= (MUX1HOT_v_6_3_2({if_for_i_1_sva , if_for_i_1_sva_1
          , row_rsc_mgc_out_stdreg_d}, {and_cse , and_9_cse , (~(and_cse | and_9_cse
          | (fsm_output[1])))})) & (signext_6_1(~ (fsm_output[1])));
      if_for_for_j_1_sva <= if_for_for_j_1_sva_1 & ({{6{nor_cse}}, nor_cse});
      if_for_for_slc_itm <= readslicef_4_1_3((conv_u2s_3_4(if_for_for_j_1_sva_2[6:4])
          + 4'b1011));
      if_for_for_j_1_sva_1 <= if_for_for_j_1_sva_2;
    end
  end

  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_3_2;
    input [17:0] inputs;
    input [2:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester
//  Generated from file(s):
//    2) $PROJECT_HOME/src/MemoryTester.cpp
// ------------------------------------------------------------------


module MemoryTester (
  bit_out_rsc_z, enabled_rsc_z, row_rsc_z, col_rsc_z, col_rsc_lzout, col_rsc_lzin,
      clk, rst
);
  output bit_out_rsc_z;
  output enabled_rsc_z;
  output [5:0] row_rsc_z;
  inout [6:0] col_rsc_z;
  output col_rsc_lzout;
  output col_rsc_lzin;
  input clk;
  input rst;


  // Interconnect Declarations
  wire bit_out_rsc_mgc_out_stdreg_d;
  wire [5:0] row_rsc_mgc_out_stdreg_d;
  wire [6:0] col_rsc_mgc_inout_stdreg_en_din;
  wire col_rsc_mgc_inout_stdreg_en_ldout;
  wire [6:0] col_rsc_mgc_inout_stdreg_en_dout;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(1)) bit_out_rsc_mgc_out_stdreg (
      .d(bit_out_rsc_mgc_out_stdreg_d),
      .z(bit_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(1)) enabled_rsc_mgc_out_stdreg (
      .d(1'b1),
      .z(enabled_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(6)) row_rsc_mgc_out_stdreg (
      .d(row_rsc_mgc_out_stdreg_d),
      .z(row_rsc_z)
    );
  mgc_inout_stdreg_en #(.rscid(4),
  .width(7)) col_rsc_mgc_inout_stdreg_en (
      .ldin(1'b0),
      .din(col_rsc_mgc_inout_stdreg_en_din),
      .ldout(col_rsc_mgc_inout_stdreg_en_ldout),
      .dout(col_rsc_mgc_inout_stdreg_en_dout),
      .lzin(col_rsc_lzin),
      .lzout(col_rsc_lzout),
      .z(col_rsc_z)
    );
  MemoryTester_core MemoryTester_core_inst (
      .clk(clk),
      .rst(rst),
      .bit_out_rsc_mgc_out_stdreg_d(bit_out_rsc_mgc_out_stdreg_d),
      .row_rsc_mgc_out_stdreg_d(row_rsc_mgc_out_stdreg_d),
      .col_rsc_mgc_inout_stdreg_en_ldout(col_rsc_mgc_inout_stdreg_en_ldout),
      .col_rsc_mgc_inout_stdreg_en_dout(col_rsc_mgc_inout_stdreg_en_dout)
    );
endmodule



