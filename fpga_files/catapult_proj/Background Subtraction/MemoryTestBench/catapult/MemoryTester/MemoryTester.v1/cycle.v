// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-014
//  Generated date: Fri May 06 14:21:28 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core
// ------------------------------------------------------------------


module MemoryTester_core (
  clk, rst, bit_out_rsc_mgc_out_stdreg_d, enabled_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  output bit_out_rsc_mgc_out_stdreg_d;
  reg bit_out_rsc_mgc_out_stdreg_d;
  output enabled_rsc_mgc_out_stdreg_d;
  reg enabled_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg init_sva;
    reg [12:0] if_for_i_1_sva;
    reg [12:0] if_for_i_1_sva_1;
    reg if_for_slc_itm;

    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        init_sva = 1'b0;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable core_rlpExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'core_rlp'
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            if ( init_sva ) begin
              enabled_rsc_mgc_out_stdreg_d <= 1'b0;
            end
            else begin
              enabled_rsc_mgc_out_stdreg_d <= 1'b1;
              if_for_i_1_sva = 13'b0;
            end
            begin : waitLoop1Exit
              forever begin : waitLoop1
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop1Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            if ( init_sva ) begin
            end
            else begin
              begin : if_forExit
                forever begin : if_for
                  // C-Step 0 of Loop 'if_for'
                  begin : waitLoop2Exit
                    forever begin : waitLoop2
                      @(posedge clk);
                      if ( rst )
                        disable core_rlpExit;
                      if ( clk )
                        disable waitLoop2Exit;
                    end
                  end
                  // C-Step 1 of Loop 'if_for'
                  bit_out_rsc_mgc_out_stdreg_d <= (if_for_i_1_sva[2]) | (if_for_i_1_sva[1])
                      | (if_for_i_1_sva[0]);
                  if_for_i_1_sva_1 = if_for_i_1_sva + 13'b1;
                  if_for_slc_itm = readslicef_8_1_7((conv_u2s_7_8(if_for_i_1_sva_1[12:6])
                      + 8'b10110101));
                  begin : waitLoop3Exit
                    forever begin : waitLoop3
                      @(posedge clk);
                      if ( rst )
                        disable core_rlpExit;
                      if ( clk )
                        disable waitLoop3Exit;
                    end
                  end
                  // C-Step 2 of Loop 'if_for'
                  if ( ~ if_for_slc_itm )
                    disable if_forExit;
                  if_for_i_1_sva = if_for_i_1_sva_1;
                end
              end
            end
            init_sva = 1'b1;
          end
        end
      end
    end
    if_for_slc_itm = 1'b0;
    if_for_i_1_sva_1 = 13'b0;
    if_for_i_1_sva = 13'b0;
    init_sva = 1'b0;
    enabled_rsc_mgc_out_stdreg_d <= 1'b0;
    bit_out_rsc_mgc_out_stdreg_d <= 1'b0;
  end


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester
//  Generated from file(s):
//    2) $PROJECT_HOME/src/MemoryTester.cpp
// ------------------------------------------------------------------


module MemoryTester (
  bit_out_rsc_z, enabled_rsc_z, clk, rst
);
  output bit_out_rsc_z;
  output enabled_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire bit_out_rsc_mgc_out_stdreg_d;
  wire enabled_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(1)) bit_out_rsc_mgc_out_stdreg (
      .d(bit_out_rsc_mgc_out_stdreg_d),
      .z(bit_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(1)) enabled_rsc_mgc_out_stdreg (
      .d(enabled_rsc_mgc_out_stdreg_d),
      .z(enabled_rsc_z)
    );
  MemoryTester_core MemoryTester_core_inst (
      .clk(clk),
      .rst(rst),
      .bit_out_rsc_mgc_out_stdreg_d(bit_out_rsc_mgc_out_stdreg_d),
      .enabled_rsc_mgc_out_stdreg_d(enabled_rsc_mgc_out_stdreg_d)
    );
endmodule



