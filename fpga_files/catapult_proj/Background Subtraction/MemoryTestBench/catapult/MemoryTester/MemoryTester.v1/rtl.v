// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-014
//  Generated date: Fri May 06 14:21:31 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module MemoryTester_core_fsm (
  clk, rst, fsm_output, st_main_tr0, st_if_for_1_tr0
);
  input clk;
  input rst;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input st_main_tr0;
  input st_if_for_1_tr0;


  // FSM State Type Declaration for MemoryTester_core_fsm_1
  parameter
    st_core_rlp = 2'd0,
    st_main = 2'd1,
    st_if_for = 2'd2,
    st_if_for_1 = 2'd3,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : MemoryTester_core_fsm_1
    case (state_var)
      st_core_rlp : begin
        fsm_output = 4'b1;
        state_var_NS = st_main;
      end
      st_main : begin
        fsm_output = 4'b10;
        if ( st_main_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_if_for;
        end
      end
      st_if_for : begin
        fsm_output = 4'b100;
        state_var_NS = st_if_for_1;
      end
      st_if_for_1 : begin
        fsm_output = 4'b1000;
        if ( st_if_for_1_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_if_for;
        end
      end
      default : begin
        fsm_output = 4'b0000;
        state_var_NS = st_core_rlp;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_core_rlp;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester_core
// ------------------------------------------------------------------


module MemoryTester_core (
  clk, rst, bit_out_rsc_mgc_out_stdreg_d, enabled_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  output bit_out_rsc_mgc_out_stdreg_d;
  reg bit_out_rsc_mgc_out_stdreg_d;
  output enabled_rsc_mgc_out_stdreg_d;
  reg enabled_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [3:0] fsm_output;
  reg init_sva;
  reg [12:0] if_for_i_1_sva;
  reg [12:0] if_for_i_1_sva_1;
  reg if_for_slc_itm;
  wire [12:0] if_for_i_1_sva_2;
  wire [13:0] nl_if_for_i_1_sva_2;


  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_MemoryTester_core_fsm_inst_st_if_for_1_tr0;
  assign nl_MemoryTester_core_fsm_inst_st_if_for_1_tr0 = ~ if_for_slc_itm;
  MemoryTester_core_fsm MemoryTester_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_main_tr0(init_sva),
      .st_if_for_1_tr0(nl_MemoryTester_core_fsm_inst_st_if_for_1_tr0)
    );
  assign nl_if_for_i_1_sva_2 = if_for_i_1_sva + 13'b1;
  assign if_for_i_1_sva_2 = nl_if_for_i_1_sva_2[12:0];
  always @(posedge clk) begin
    if ( rst ) begin
      enabled_rsc_mgc_out_stdreg_d <= 1'b0;
      bit_out_rsc_mgc_out_stdreg_d <= 1'b0;
      init_sva <= 1'b0;
      if_for_i_1_sva <= 13'b0;
      if_for_slc_itm <= 1'b0;
      if_for_i_1_sva_1 <= 13'b0;
    end
    else begin
      enabled_rsc_mgc_out_stdreg_d <= (enabled_rsc_mgc_out_stdreg_d & (~(((fsm_output[1])
          & init_sva) | ((~ if_for_slc_itm) & (fsm_output[3]))))) | (fsm_output[0]);
      bit_out_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({bit_out_rsc_mgc_out_stdreg_d ,
          ((if_for_i_1_sva[2]) | (if_for_i_1_sva[1]) | (if_for_i_1_sva[0]))}, fsm_output[2]);
      init_sva <= (fsm_output[1]) | (fsm_output[3]);
      if_for_i_1_sva <= if_for_i_1_sva_1 & (signext_13_1(fsm_output[3]));
      if_for_slc_itm <= readslicef_8_1_7((conv_u2s_7_8(if_for_i_1_sva_2[12:6]) +
          8'b10110101));
      if_for_i_1_sva_1 <= if_for_i_1_sva_2;
    end
  end

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [12:0] signext_13_1;
    input [0:0] vector;
  begin
    signext_13_1= {{12{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    MemoryTester
//  Generated from file(s):
//    2) $PROJECT_HOME/src/MemoryTester.cpp
// ------------------------------------------------------------------


module MemoryTester (
  bit_out_rsc_z, enabled_rsc_z, clk, rst
);
  output bit_out_rsc_z;
  output enabled_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire bit_out_rsc_mgc_out_stdreg_d;
  wire enabled_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(1)) bit_out_rsc_mgc_out_stdreg (
      .d(bit_out_rsc_mgc_out_stdreg_d),
      .z(bit_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(1)) enabled_rsc_mgc_out_stdreg (
      .d(enabled_rsc_mgc_out_stdreg_d),
      .z(enabled_rsc_z)
    );
  MemoryTester_core MemoryTester_core_inst (
      .clk(clk),
      .rst(rst),
      .bit_out_rsc_mgc_out_stdreg_d(bit_out_rsc_mgc_out_stdreg_d),
      .enabled_rsc_mgc_out_stdreg_d(enabled_rsc_mgc_out_stdreg_d)
    );
endmodule



