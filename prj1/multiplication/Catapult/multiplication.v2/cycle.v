// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-002
//  Generated date: Tue Mar 08 15:03:47 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    multiplication_core
// ------------------------------------------------------------------


module multiplication_core (
  clk, en, arst_n, input_a_rsc_mgc_in_wire_d, input_b_rsc_mgc_in_wire_d, output_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [39:0] input_a_rsc_mgc_in_wire_d;
  input [39:0] input_b_rsc_mgc_in_wire_d;
  output [39:0] output_rsc_mgc_out_stdreg_d;
  reg [39:0] output_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg exit_MAC_lpi;
    reg [2:0] i_1_lpi_dfm;
    reg [7:0] MAC_mul_cmx_sva;
    reg equal_tmp;
    reg equal_tmp_1;
    reg equal_tmp_2;
    reg equal_tmp_3;
    reg [7:0] io_read_output_rsc_d_sdt_sg4_lpi_dfm;
    reg [7:0] io_read_output_rsc_d_sdt_sg3_lpi_dfm;
    reg [7:0] io_read_output_rsc_d_sdt_sg2_lpi_dfm;
    reg [7:0] io_read_output_rsc_d_sdt_sg1_lpi_dfm;
    reg [7:0] io_read_output_rsc_d_sdt_1_lpi_dfm;
    reg [2:0] i_1_sva_1;
    reg [39:0] MAC_io_read_input_a_rsc_d_sdt;
    reg [39:0] MAC_io_read_input_b_rsc_d_sdt;

    reg[7:0] MAC_mux_nl;
    reg[7:0] MAC_mux_7_nl;
    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        i_1_lpi_dfm = i_1_sva_1 & (signext_3_1(~ exit_MAC_lpi));
        MAC_io_read_input_a_rsc_d_sdt = input_a_rsc_mgc_in_wire_d;
        MAC_io_read_input_b_rsc_d_sdt = input_b_rsc_mgc_in_wire_d;
        MAC_mux_nl = MUX_v_8_8_2({(MAC_io_read_input_a_rsc_d_sdt[7:0]) , (MAC_io_read_input_a_rsc_d_sdt[15:8])
            , (MAC_io_read_input_a_rsc_d_sdt[23:16]) , (MAC_io_read_input_a_rsc_d_sdt[31:24])
            , (MAC_io_read_input_a_rsc_d_sdt[39:32]) , 8'b0 , 8'b0 , 8'b0}, i_1_lpi_dfm);
        MAC_mux_7_nl = MUX_v_8_8_2({(MAC_io_read_input_b_rsc_d_sdt[7:0]) , (MAC_io_read_input_b_rsc_d_sdt[15:8])
            , (MAC_io_read_input_b_rsc_d_sdt[23:16]) , (MAC_io_read_input_b_rsc_d_sdt[31:24])
            , (MAC_io_read_input_b_rsc_d_sdt[39:32]) , 8'b0 , 8'b0 , 8'b0}, i_1_lpi_dfm);
        MAC_mul_cmx_sva = conv_s2u_16_8((MAC_mux_nl) * (MAC_mux_7_nl));
        equal_tmp = (i_1_lpi_dfm[0]) & (~((i_1_lpi_dfm[2]) | (i_1_lpi_dfm[1])));
        equal_tmp_1 = (i_1_lpi_dfm[1]) & (~((i_1_lpi_dfm[2]) | (i_1_lpi_dfm[0])));
        equal_tmp_2 = (i_1_lpi_dfm[1]) & (i_1_lpi_dfm[0]) & (~ (i_1_lpi_dfm[2]));
        equal_tmp_3 = (i_1_lpi_dfm[2]) & (~((i_1_lpi_dfm[1]) | (i_1_lpi_dfm[0])));
        io_read_output_rsc_d_sdt_sg4_lpi_dfm = MUX_v_8_2_2({io_read_output_rsc_d_sdt_sg4_lpi_dfm
            , MAC_mul_cmx_sva}, equal_tmp_3);
        io_read_output_rsc_d_sdt_sg3_lpi_dfm = MUX_v_8_2_2({io_read_output_rsc_d_sdt_sg3_lpi_dfm
            , MAC_mul_cmx_sva}, equal_tmp_2);
        io_read_output_rsc_d_sdt_sg2_lpi_dfm = MUX_v_8_2_2({io_read_output_rsc_d_sdt_sg2_lpi_dfm
            , MAC_mul_cmx_sva}, equal_tmp_1);
        io_read_output_rsc_d_sdt_sg1_lpi_dfm = MUX_v_8_2_2({io_read_output_rsc_d_sdt_sg1_lpi_dfm
            , MAC_mul_cmx_sva}, equal_tmp);
        io_read_output_rsc_d_sdt_1_lpi_dfm = MUX_v_8_2_2({MAC_mul_cmx_sva , io_read_output_rsc_d_sdt_1_lpi_dfm},
            equal_tmp | equal_tmp_1 | equal_tmp_2 | equal_tmp_3 | (i_1_lpi_dfm[2])
            | (i_1_lpi_dfm[1]) | (i_1_lpi_dfm[0]));
        output_rsc_mgc_out_stdreg_d <= {io_read_output_rsc_d_sdt_sg4_lpi_dfm , io_read_output_rsc_d_sdt_sg3_lpi_dfm
            , io_read_output_rsc_d_sdt_sg2_lpi_dfm , io_read_output_rsc_d_sdt_sg1_lpi_dfm
            , io_read_output_rsc_d_sdt_1_lpi_dfm};
        i_1_sva_1 = i_1_lpi_dfm + 3'b1;
        exit_MAC_lpi = ~ (readslicef_4_1_3((conv_u2s_3_4(i_1_sva_1) + 4'b1011)));
      end
    end
    MAC_io_read_input_b_rsc_d_sdt = 40'b0;
    MAC_io_read_input_a_rsc_d_sdt = 40'b0;
    i_1_sva_1 = 3'b0;
    io_read_output_rsc_d_sdt_1_lpi_dfm = 8'b0;
    io_read_output_rsc_d_sdt_sg1_lpi_dfm = 8'b0;
    io_read_output_rsc_d_sdt_sg2_lpi_dfm = 8'b0;
    io_read_output_rsc_d_sdt_sg3_lpi_dfm = 8'b0;
    io_read_output_rsc_d_sdt_sg4_lpi_dfm = 8'b0;
    equal_tmp_3 = 1'b0;
    equal_tmp_2 = 1'b0;
    equal_tmp_1 = 1'b0;
    equal_tmp = 1'b0;
    MAC_mul_cmx_sva = 8'b0;
    i_1_lpi_dfm = 3'b0;
    exit_MAC_lpi = 1'b0;
    output_rsc_mgc_out_stdreg_d <= 40'b0;
    exit_MAC_lpi = 1'b1;
  end


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [7:0] MUX_v_8_8_2;
    input [63:0] inputs;
    input [2:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[63:56];
      end
      3'b001 : begin
        result = inputs[55:48];
      end
      3'b010 : begin
        result = inputs[47:40];
      end
      3'b011 : begin
        result = inputs[39:32];
      end
      3'b100 : begin
        result = inputs[31:24];
      end
      3'b101 : begin
        result = inputs[23:16];
      end
      3'b110 : begin
        result = inputs[15:8];
      end
      3'b111 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[63:56];
      end
    endcase
    MUX_v_8_8_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function  [7:0] conv_s2u_16_8 ;
    input signed [15:0]  vector ;
  begin
    conv_s2u_16_8 = vector[7:0];
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    multiplication
//  Generated from file(s):
//    2) $PROJECT_HOME/../multiplication_source/multiplication.cpp
// ------------------------------------------------------------------


module multiplication (
  input_a_rsc_z, input_b_rsc_z, output_rsc_z, clk, en, arst_n
);
  input [39:0] input_a_rsc_z;
  input [39:0] input_b_rsc_z;
  output [39:0] output_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [39:0] input_a_rsc_mgc_in_wire_d;
  wire [39:0] input_b_rsc_mgc_in_wire_d;
  wire [39:0] output_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(40)) input_a_rsc_mgc_in_wire (
      .d(input_a_rsc_mgc_in_wire_d),
      .z(input_a_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(40)) input_b_rsc_mgc_in_wire (
      .d(input_b_rsc_mgc_in_wire_d),
      .z(input_b_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(40)) output_rsc_mgc_out_stdreg (
      .d(output_rsc_mgc_out_stdreg_d),
      .z(output_rsc_z)
    );
  multiplication_core multiplication_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .input_a_rsc_mgc_in_wire_d(input_a_rsc_mgc_in_wire_d),
      .input_b_rsc_mgc_in_wire_d(input_b_rsc_mgc_in_wire_d),
      .output_rsc_mgc_out_stdreg_d(output_rsc_mgc_out_stdreg_d)
    );
endmodule



