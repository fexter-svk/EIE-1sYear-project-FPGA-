// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   al3515@EEWS104A-002
//  Generated date: Fri Mar 11 15:52:01 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mean_vga_core
// ------------------------------------------------------------------


module mean_vga_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  reg reg_vout_rsc_mgc_out_stdreg_d_tmp_1;
  reg [9:0] reg_vout_rsc_mgc_out_stdreg_d_tmp_4;
  wire [10:0] FRAME_ac_int_cctor_16_sva;
  wire [11:0] nl_FRAME_ac_int_cctor_16_sva;
  wire [2:0] acc_imod_7_sva;
  wire [3:0] nl_acc_imod_7_sva;
  wire [2:0] acc_imod_4_sva;
  wire [3:0] nl_acc_imod_4_sva;
  wire [2:0] acc_imod_1_sva;
  wire [3:0] nl_acc_imod_1_sva;
  wire [4:0] FRAME_acc_25_itm;
  wire [5:0] nl_FRAME_acc_25_itm;
  wire [4:0] FRAME_acc_31_itm;
  wire [5:0] nl_FRAME_acc_31_itm;
  wire [4:0] FRAME_acc_37_itm;
  wire [5:0] nl_FRAME_acc_37_itm;


  // Interconnect Declarations for Component Instantiations 
  assign vout_rsc_mgc_out_stdreg_d = {(reg_vout_rsc_mgc_out_stdreg_d_tmp_4[9:1])
      , reg_vout_rsc_mgc_out_stdreg_d_tmp_1 , (reg_vout_rsc_mgc_out_stdreg_d_tmp_4[9:1])
      , reg_vout_rsc_mgc_out_stdreg_d_tmp_1 , reg_vout_rsc_mgc_out_stdreg_d_tmp_4};
  assign nl_FRAME_ac_int_cctor_16_sva = conv_s2u_10_11(readslicef_11_10_1((conv_u2s_10_11({(readslicef_10_9_1((conv_u2u_9_10({conv_u2u_16_8(conv_u2u_2_8((conv_u2u_1_2(vin_rsc_mgc_in_wire_d[28])
      + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[18])) + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[8]))
      * 8'b1010101) , 1'b1}) + conv_u2u_8_10({(conv_u2u_1_2(vin_rsc_mgc_in_wire_d[27])
      + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[17])) , (conv_u2u_1_2(vin_rsc_mgc_in_wire_d[25])
      + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[27])) , (readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(vin_rsc_mgc_in_wire_d[25])
      , 1'b1})) + conv_u2u_3_4(signext_3_2({(vin_rsc_mgc_in_wire_d[27]) , (vin_rsc_mgc_in_wire_d[3])})))))
      , (acc_imod_7_sva[1])})))) , 1'b1}) + conv_s2s_9_11({(readslicef_9_8_1((conv_u2s_8_9({(readslicef_8_7_1((conv_u2u_7_8({(vin_rsc_mgc_in_wire_d[7])
      , 1'b0 , (vin_rsc_mgc_in_wire_d[15]) , 1'b0 , (signext_2_1(vin_rsc_mgc_in_wire_d[19]))
      , 1'b1}) + conv_u2u_6_8({(readslicef_6_5_1((conv_u2u_5_6({(vin_rsc_mgc_in_wire_d[17])
      , (vin_rsc_mgc_in_wire_d[14]) , (signext_2_1(vin_rsc_mgc_in_wire_d[17])) ,
      1'b1}) + conv_u2u_5_6({(vin_rsc_mgc_in_wire_d[5:4]) , (signext_2_1(vin_rsc_mgc_in_wire_d[9]))
      , (~ (acc_imod_4_sva[2]))})))) , (vin_rsc_mgc_in_wire_d[2])})))) , 1'b1}) +
      conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_6_7({(readslicef_6_5_1((conv_s2s_4_6({(readslicef_4_3_1((conv_s2s_3_4({(FRAME_acc_25_itm[4:3])
      , 1'b1}) + conv_s2s_3_4({(FRAME_acc_31_itm[4:3]) , (vin_rsc_mgc_in_wire_d[13])}))))
      , 1'b1}) + conv_u2s_4_6({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(vin_rsc_mgc_in_wire_d[7])
      , 1'b1})) + conv_u2u_3_4({(vin_rsc_mgc_in_wire_d[23]) , (vin_rsc_mgc_in_wire_d[21])
      , (vin_rsc_mgc_in_wire_d[11])})))) , (FRAME_acc_31_itm[2])})))) , 1'b1}) +
      conv_s2s_5_7({(~ (vin_rsc_mgc_in_wire_d[7])) , (readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(vin_rsc_mgc_in_wire_d[29])
      , 1'b1})) + conv_u2u_3_4({1'b1 , (vin_rsc_mgc_in_wire_d[24]) , (acc_imod_4_sva[1])}))))
      , (vin_rsc_mgc_in_wire_d[1])})))) , (FRAME_acc_37_itm[2])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_7_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_7_sva[1])) , (~
      (acc_imod_7_sva[2]))})))))})))) + (readslicef_12_11_1((conv_u2s_10_12({conv_u2u_12_6(conv_u2u_2_6((conv_u2u_1_2(vin_rsc_mgc_in_wire_d[29])
      + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[19])) + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[9]))
      * 6'b10101) , (vin_rsc_mgc_in_wire_d[24]) , (signext_2_1(vin_rsc_mgc_in_wire_d[15]))
      , 1'b1}) + conv_s2s_9_12({(readslicef_9_8_1((conv_s2s_7_9({(readslicef_7_6_1((conv_u2s_5_7({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(vin_rsc_mgc_in_wire_d[13])
      , (vin_rsc_mgc_in_wire_d[22]) , 1'b1}) + conv_u2u_3_4({(vin_rsc_mgc_in_wire_d[3])
      , (vin_rsc_mgc_in_wire_d[23]) , (~ (readslicef_3_1_2((({1'b1 , (acc_imod_1_sva[0])
      , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~ (acc_imod_1_sva[2]))})))))}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(FRAME_acc_25_itm[2])
      , 1'b1}) + conv_u2u_2_3({(acc_imod_1_sva[1]) , (~ (acc_imod_1_sva[2]))}))))
      , (vin_rsc_mgc_in_wire_d[14])})))) , 1'b1}) + conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_3_5({(FRAME_acc_37_itm[4:3])
      , 1'b1}) + conv_u2s_3_5(signext_3_2({(vin_rsc_mgc_in_wire_d[5]) , (vin_rsc_mgc_in_wire_d[12])})))))
      , (~ (readslicef_3_1_2((({1'b1 , (acc_imod_4_sva[0]) , 1'b1}) + conv_u2s_2_3({(~
      (acc_imod_4_sva[1])) , (~ (acc_imod_4_sva[2]))})))))})))) , 1'b1}) + conv_u2s_7_9({conv_u2u_12_6(conv_u2u_2_6((conv_u2u_1_2(vin_rsc_mgc_in_wire_d[26])
      + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[16])) + conv_u2u_1_2(vin_rsc_mgc_in_wire_d[6]))
      * 6'b10101) , (vin_rsc_mgc_in_wire_d[4])})))) , (~ (acc_imod_7_sva[2]))}))));
  assign FRAME_ac_int_cctor_16_sva = nl_FRAME_ac_int_cctor_16_sva[10:0];
  assign nl_acc_imod_7_sva = conv_s2s_2_3(conv_s2s_1_2(FRAME_acc_37_itm[2]) + conv_u2s_1_2(FRAME_acc_37_itm[1]))
      + conv_s2s_2_3(FRAME_acc_37_itm[4:3]);
  assign acc_imod_7_sva = nl_acc_imod_7_sva[2:0];
  assign nl_acc_imod_4_sva = conv_s2s_2_3(conv_s2s_1_2(FRAME_acc_31_itm[2]) + conv_u2s_1_2(FRAME_acc_31_itm[1]))
      + conv_s2s_2_3(FRAME_acc_31_itm[4:3]);
  assign acc_imod_4_sva = nl_acc_imod_4_sva[2:0];
  assign nl_FRAME_acc_25_itm = ({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[24])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[25])) , 1'b1})))) , 1'b1})
      + conv_u2u_2_4({(~ (vin_rsc_mgc_in_wire_d[21])) , (~ (vin_rsc_mgc_in_wire_d[27]))}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[22])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[23])) , (vin_rsc_mgc_in_wire_d[26])}))))
      , (vin_rsc_mgc_in_wire_d[28])})))) , 1'b1}) + ({3'b101 , (vin_rsc_mgc_in_wire_d[20])
      , (~ (vin_rsc_mgc_in_wire_d[29]))});
  assign FRAME_acc_25_itm = nl_FRAME_acc_25_itm[4:0];
  assign nl_FRAME_acc_31_itm = ({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[14])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[15])) , 1'b1})))) , 1'b1})
      + conv_u2u_2_4({(~ (vin_rsc_mgc_in_wire_d[11])) , (~ (vin_rsc_mgc_in_wire_d[17]))}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[12])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[13])) , (vin_rsc_mgc_in_wire_d[16])}))))
      , (vin_rsc_mgc_in_wire_d[18])})))) , 1'b1}) + ({3'b101 , (vin_rsc_mgc_in_wire_d[10])
      , (~ (vin_rsc_mgc_in_wire_d[19]))});
  assign FRAME_acc_31_itm = nl_FRAME_acc_31_itm[4:0];
  assign nl_FRAME_acc_37_itm = ({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[4])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[5])) , 1'b1})))) , 1'b1})
      + conv_u2u_2_4({(~ (vin_rsc_mgc_in_wire_d[1])) , (~ (vin_rsc_mgc_in_wire_d[7]))}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(vin_rsc_mgc_in_wire_d[2])
      , 1'b1}) + conv_u2u_2_3({(~ (vin_rsc_mgc_in_wire_d[3])) , (vin_rsc_mgc_in_wire_d[6])}))))
      , (vin_rsc_mgc_in_wire_d[8])})))) , 1'b1}) + ({3'b101 , (vin_rsc_mgc_in_wire_d[0])
      , (~ (vin_rsc_mgc_in_wire_d[9]))});
  assign FRAME_acc_37_itm = nl_FRAME_acc_37_itm[4:0];
  assign nl_acc_imod_1_sva = conv_s2s_2_3(conv_s2s_1_2(FRAME_acc_25_itm[2]) + conv_u2s_1_2(FRAME_acc_25_itm[1]))
      + conv_s2s_2_3(FRAME_acc_25_itm[4:3]);
  assign acc_imod_1_sva = nl_acc_imod_1_sva[2:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_vout_rsc_mgc_out_stdreg_d_tmp_1 <= 1'b0;
      reg_vout_rsc_mgc_out_stdreg_d_tmp_4 <= 10'b0;
    end
    else begin
      if ( en ) begin
        reg_vout_rsc_mgc_out_stdreg_d_tmp_1 <= (FRAME_ac_int_cctor_16_sva[0]) | (FRAME_ac_int_cctor_16_sva[10]);
        reg_vout_rsc_mgc_out_stdreg_d_tmp_4 <= FRAME_ac_int_cctor_16_sva[9:0];
      end
    end
  end

  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function  [10:0] conv_s2u_10_11 ;
    input signed [9:0]  vector ;
  begin
    conv_s2u_10_11 = {vector[9], vector};
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_16_8 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_8 = vector[7:0];
  end
  endfunction


  function  [7:0] conv_u2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_8 = {{6{1'b0}}, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_8_10 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_10 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2s_6_7 = {vector[5], vector};
  end
  endfunction


  function signed [5:0] conv_s2s_4_6 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function signed [5:0] conv_u2s_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [5:0] conv_u2u_12_6 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_6 = vector[5:0];
  end
  endfunction


  function  [5:0] conv_u2u_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_9_12 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_12 = {{3{vector[8]}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mean_vga
//  Generated from file(s):
//    3) $PROJECT_HOME/../sobel_filter_source/blur_sob.c
// ------------------------------------------------------------------


module mean_vga (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  mean_vga_core mean_vga_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



